diff --git a/rules/base.xml b/rules/base.xml
index eff2f941..87a8a266 100644
--- a/rules/base.xml
+++ b/rules/base.xml
@@ -1532,6 +1532,12 @@
             <description>English (Workman, intl., with dead keys)</description>
            </configItem>
          </variant>
+        <variant>
+          <configItem>
+            <name>codeman</name>
+            <description>English (Codeman)</description>
+          </configItem>
+        </variant>
       </variantList>
     </layout>
     <layout>
diff --git a/symbols/codeman b/symbols/codeman
new file mode 100644
index 00000000..7ab292f2
--- /dev/null
+++ b/symbols/codeman
@@ -0,0 +1,157 @@
+// Created by Cantoraz Zhou <cantoraz@gmail.com>
+//
+// The Codeman layout has same alpha-numeric keys of level 1 and level 2
+// from the ANSI/JIS QWERTY keyboard, with additional punctuations,
+// mostly inspired by Neo Layer 3/4/5/6 and some other layers, into
+// additional level 3, level 4, level 5 and level6.
+
+// Basic Codeman layout shared by concrete variants.
+// This partial only defines common alphanumeric keys shared between
+// variants.
+//
+// Do not use this layout directly!
+// It should be inlcuded in a concrete variant.
+//
+// Created by Cantoraz Zhou <cantoraz@gmail.com>
+//
+// ┌─────┐
+// │     │
+// │ Esc │
+// ├─────┼─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━━┓
+// │ ~ ´`│!   ¬│@   ∨│#   ∧│$»  ⟂│%«  ∠│^·  ∥│&€  →│*„  ∞│(“  ∝│)”  ∅│_ẞ   │+    ┃           ┃
+// │ `˙¯ˇ│1°   │2§  ∪│3ℓ  ∩│4›  ∴│5‹  ∵│6•  △│7¥   │8‚   │9‘  ⊂│0’  ⊃│-ß  −│=    ┃           ┃
+// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━━┫
+// ┃        ┃Q   ∎│W   Ω│E   ∃│R    │T   ∂│Y   ∇│U   Ψ│I   ∫│O   ∈│P   ∏│{    │}    │ |      ┃
+// ┃ ↹Comp  ┃ …  ϑ│ _⌫ ω│ [⇡ ε│ ]⌦ ρ│ ^  τ│ !  υ│ <  ψ│ >  ι│ =  ο│ &  π│[    │]    │ \      ┃
+// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┷━━━━━━━━┫
+// ┃          ┃A   ∀│S   ∑│D   ∆│F   Φ│G   Γ│H    │J   Θ│K   ×│L    │:¨   │     ┃            ┃
+// ┃          ┃ \⇱ α│ /⇠ σ│ {⇣ δ│ }⇢ φ│ *⇲ γ│ ?  η│ (  θ│ )  κ│ -  λ│;@   │     ┃            ┃
+// ┣━━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
+// ┃             ┃Z    │X    │C   Ξ│V    │B    │N    │M    │<″   │>′   │?    ┃               ┃
+// ┃             ┃ #↵ ζ│ $⇞ χ│ |â ξ│ ~⇟ ϕ│ `  β│ +  ν│ %  μ│,"   │.'   │/    ┃               ┃
+// ┣━━━━━┳━━━━━━━╋━━━━━╈━━━━━╅─────┴─────┴─────┴─────┴─────╆━━━━━╈━━━━━╈━━━━━╋━━━━━━━━━━━━━━━┛
+// ┃     ┃       ┃     ┃     ┃                             ┃     ┃     ┃     ┃
+// ┃     ┃       ┃     ┃     ┃                             ┃     ┃     ┃     ┃
+// ┗━━━━━┻━━━━━━━┻━━━━━┻━━━━━┹─────────────────────────────┺━━━━━┻━━━━━┻━━━━━┛
+// Mapping between Latin and Greek alphabets for mnemonic:
+//     Γ         Θ            Ξ              Φ    Ψ
+// α β γ δ ε ζ η θϑ ι κ λ μ ν ξ ο π ρ σς τ υ φϕ χ ψ ω
+// a b g d e z h jq i k l m n c o p r s  t u fv x y w
+default partial alphanumeric_keys
+xkb_symbols "basic" {
+
+  include "us(basic)"
+
+  // 6th Row
+//key <ESC>  { [       Escape ] };
+
+  key.type = "EIGHT_LEVEL";
+
+  // 5th Row
+  key <TLDE> { [        grave,   asciitilde,        dead_abovedot,             NoSymbol,  dead_macron, dead_acute,      dead_caron,     dead_grave ] }; // ` ~ ˙ ⍰ ˉ ˊ ˇ ˋ
+  key <AE01> { [            1,     NoSymbol,               degree,             NoSymbol,     NoSymbol,   NoSymbol,        NoSymbol,        notsign ] }; // 1 ! ° ⍰ ⍰ ⍰ ⍰ ¬
+  key <AE02> { [            2,     NoSymbol,              section,             NoSymbol,     NoSymbol,   NoSymbol,           union,      logicalor ] }; // 2 @ § ⍰ ⍰ ⍰ ∪ ∨
+  key <AE03> { [            3,     NoSymbol,                U2113,             NoSymbol,     NoSymbol,   NoSymbol,    intersection,     logicaland ] }; // 3 # ℓ ⍰ ⍰ ⍰ ∩ ∧
+  key <AE04> { [            4,     NoSymbol,                U203A,       guillemotright,     NoSymbol,   NoSymbol,         because,          U27C2 ] }; // 4 $ › » ⍰ ⍰ ∵ ⟂
+  key <AE05> { [            5,     NoSymbol,                U2039,        guillemotleft,     NoSymbol,   NoSymbol,       therefore,          U2220 ] }; // 5 % ‹ « ⍰ ⍰ ∴ ∠
+  key <AE06> { [            6,     NoSymbol,   enfilledcircbullet,       periodcentered,     NoSymbol,   NoSymbol, opentribulletup,          U2225 ] }; // 6 ^ • · ⍰ ⍰ △ ∥
+  key <AE07> { [            7,     NoSymbol,                  yen,             EuroSign,     NoSymbol,   NoSymbol,        NoSymbol,     rightarrow ] }; // 7 & ¥ € ⍰ ⍰ ⍰ →
+  key <AE08> { [            8,     NoSymbol,   singlelowquotemark,   doublelowquotemark,     NoSymbol,   NoSymbol,        NoSymbol,       infinity ] }; // 8 * ‚ „ ⍰ ⍰ ⍰ ∞
+  key <AE09> { [            9,     NoSymbol,  leftsinglequotemark,  leftdoublequotemark,     NoSymbol,   NoSymbol,      includedin,      variation ] }; // 9 ( ‘ “ ⍰ ⍰ ⊂ ∝
+  key <AE10> { [            0,     NoSymbol, rightsinglequotemark, rightdoublequotemark,     NoSymbol,   NoSymbol,        includes,       emptyset ] }; // 0 ) ’ ” ⍰ ⍰ ⊃ ∅
+  key <AE11> { [        minus,   underscore,               ssharp,                U1E9E,     NoSymbol,   NoSymbol,           U2212                 ] }; // - _ ß ẞ ⍰ ⍰ −
+//key <AE12> { [        equal,         plus                                                                                                        ] }; // = +
+
+  key.type = "EIGHT_LEVEL_SEMIALPHABETIC";
+
+  // 4th Row
+  key <TAB>  {
+    type = "FOUR_LEVEL",
+    symbols[Group1] = [   Tab, ISO_Left_Tab,    Multi_key                                                                              ] }; // ⇥ ⇤ ⎄
+  key <AD01> { [            q,            Q,     ellipsis,       NoSymbol,     NoSymbol,     NoSymbol,         U03D1,            U220E ] }; // q Q … ⍰ ⍰ ⍰ ϑ ∎
+  key <AD02> { [            w,            W,   underscore,       NoSymbol,    BackSpace,    BackSpace, Greek_omega  ,            U2126 ] }; // w W _ ⍰ ⌫ ⌫ ω Ω
+  key <AD03> { [            e,            E,  bracketleft,       NoSymbol,           Up,           Up, Greek_epsilon,            U2203 ] }; // e E [ ⍰ ⇡ ⇡ ε ∃
+  key <AD04> { [            r,            R, bracketright,       NoSymbol,       Delete,       Delete, Greek_rho                       ] }; // r R ] ⍰ ⌦ ⌦ ρ
+  key <AD05> { [            t,            T,  asciicircum,       NoSymbol,     NoSymbol,     NoSymbol, Greek_tau    , partdifferential ] }; // t T ^ ⍰ ⍰ ⍰ τ ∂
+  key <AD06> { [            y,            Y,       exclam,       NoSymbol,     NoSymbol,     NoSymbol, Greek_upsilon,            nabla ] }; // y Y ! ⍰ ⍰ ⍰ υ ∇
+  KEY <AD07> { [            u,            U,         less,       NoSymbol,     NoSymbol,     NoSymbol, Greek_psi    , Greek_PSI        ] }; // u U < ⍰ ⍰ ⍰ ψ Ψ
+  key <AD08> { [            i,            I,      greater,       NoSymbol,     NoSymbol,     NoSymbol, Greek_iota   ,         integral ] }; // i I > ⍰ ⍰ ⍰ ι ∫
+  key <AD09> { [            o,            O,        equal,       NoSymbol,     NoSymbol,     NoSymbol, Greek_omicron,        elementof ] }; // o O = ⍰ ⍰ ⍰ ο ∈
+  key <AD10> { [            p,            P,    ampersand,       NoSymbol,     NoSymbol,     NoSymbol, Greek_pi     ,            U220F ] }; // p P & ⍰ ⍰ ⍰ π ∏
+//key <AD11> { [  bracketleft,    braceleft                                                                                            ] }; // [ {
+//key <AD12> { [ bracketright,   braceright                                                                                            ] }; // ] }
+
+  // 3rd Row
+  key <AC01> { [            a,            A,    backslash,       NoSymbol,         Home,         Home, Greek_alpha  ,            U2200 ] }; // a A \ ⍰ ⇱ ⇱ α ∀
+  key <AC02> { [            s,            S,        slash,       NoSymbol,         Left,         Left, Greek_sigma  ,            U2211 ] }; // s S / ⍰ ⇠ ⇠ σ ∑
+  key <AC03> { [            d,            D,    braceleft,       NoSymbol,         Down,         Down, Greek_delta  ,            U2206 ] }; // d D { ⍰ ⇣ ⇣ δ ∆
+  key <AC04> { [            f,            F,   braceright,       NoSymbol,        Right,        Right, Greek_phi    , Greek_PHI        ] }; // f F } ⍰ ⇢ ⇢ φ Φ
+  key <AC05> { [            g,            G,     asterisk,       NoSymbol,          End,          End, Greek_gamma  , Greek_GAMMA      ] }; // g G * ⍰ ⇲ ⇲ γ Γ
+  key <AC06> { [            h,            H,     question,       NoSymbol,     NoSymbol,     NoSymbol, Greek_eta                       ] }; // h H ? ⍰ ⍰ ⍰ η
+  key <AC07> { [            j,            J,    parenleft,       NoSymbol,     NoSymbol,     NoSymbol, Greek_theta  , Greek_THETA      ] }; // j J ( ⍰ ⍰ ⍰ θ Θ
+  key <AC08> { [            k,            K,   parenright,       NoSymbol,     NoSymbol,     NoSymbol, Greek_kappa  ,         multiply ] }; // k K ) ⍰ ⍰ ⍰ κ ×
+  key <AC09> { [            l,            L,        minus,       NoSymbol,     NoSymbol,     NoSymbol, Greek_lamda                     ] }; // l L - ⍰ ⍰ ⍰ λ
+  key.type = "EIGHT_LEVEL";
+  key <AC10> { [    semicolon,        colon,           at, dead_diaeresis                                                              ] }; // ; : @ ⍤
+//key <AC11> { [   apostrophe,     quotedbl                                                                                            ] }; // ' "
+
+  key.type = "EIGHT_LEVEL_SEMIALPHABETIC";
+
+  // 2nd Row
+  key <AB01> { [            z,           Z,   numbersign,       NoSymbol,       Return,       Return, Greek_zeta                      ] }; // z Z # ⍰ ↵ ↵ ζ
+  key <AB02> { [            x,           X,       dollar,       NoSymbol,        Prior,        Prior, Greek_chi                       ] }; // x X $ ⍰ ⇞ ⇞ χ
+  key <AB03> { [            c,           C,          bar,       NoSymbol,       Insert,       Insert, Greek_xi     , Greek_XI         ] }; // c C | ⍰ â â ξ Ξ
+  key <AB04> { [            v,           V,   asciitilde,       NoSymbol,         Next,         Next,         U03D5                   ] }; // v V ~ ⍰ ⇟ ⇟ ϕ
+  key <AB05> { [            b,           B,        grave,       NoSymbol,     NoSymbol,     NoSymbol, Greek_beta                      ] }; // b B ` ⍰ ⍰ ⍰ β
+  key <AB06> { [            n,           N,         plus,       NoSymbol,     NoSymbol,     NoSymbol, Greek_nu                        ] }; // n N + ⍰ ⍰ ⍰ ν
+  key <AB07> { [            m,           M,      percent,       NoSymbol,     NoSymbol,     NoSymbol, Greek_mu                        ] }; // m M % ⍰ ⍰ ⍰ μ
+  key.type = "EIGHT_LEVEL";
+  key <AB08> { [        comma,        less,     quotedbl,       seconds                                                               ] }; // , < " ″
+  key <AB09> { [       period,     greater,   apostrophe,       minutes                                                               ] }; // . > ' ′
+//key <AB10> { [        slash,    question                                                                                            ] }; // / ?
+
+//key <BKSL> { [    backslash,         bar                                                                                            ] }; // \ |
+};
+
+// Codeman layout for standard (ANSI) keyboard with modifiers regularized by udev.
+//
+// Created by Cantoraz Zhou <cantoraz@gmail.com>
+//
+// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━━┓
+// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃           ┃
+// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃           ┃
+// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━━┫
+// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     │        ┃
+// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     │        ┃
+// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┷━┳━━━┷━━━━━━━━┫
+// ┃          ┃     │     │     │     │     │     │     │     │     │     ┃     ┃            ┃
+// ┃ Level5   ┃     │     │     │     │     │     │     │     │     │     ┃ Lvl5┃            ┃
+// ┣━━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┳━━┻━━━━━━━━━━━━┫
+// ┃             ┃     │     │     │     │     │     │     │     │     │     ┃               ┃
+// ┃             ┃     │     │     │     │     │     │     │     │     │     ┃               ┃
+// ┣━━━━━┳━━━━━━━╋━━━━━╈━━━━━╅─────┴─────┴─────┴─────┴─────╆━━━━━╈━━━━━╈━━━━━╋━━━━━━━━━━━━━━━┛
+// ┃     ┃       ┃     ┃     ┃                             ┃ Comp┃     ┃     ┃
+// ┃     ┃       ┃     ┃     ┃                             ┃AltGr┃     ┃     ┃
+// ┗━━━━━┻━━━━━━━┻━━━━━┻━━━━━┹─────────────────────────────┺━━━━━┻━━━━━┻━━━━━┛
+// <CAPS> -> ISO_Level5_Shift <AC11> -> ISO_Level5_Shift
+// <COMP> -> ISO_Level3_Shift
+partial alphanumeric_keys modifier_keys
+xkb_symbols "std" {
+
+  include "codeman(basic)"
+  name[Group1] = "Codeman";
+
+  // 3rd Row
+  include "level5(caps_switch)"
+
+  key <AC11> {
+  type = "ONE_LEVEL",
+    symbols[Group1] = [ ISO_Level5_Shift ]
+  };
+
+  // 1st Row
+  key <COMP> {
+    type[Group1]="TWO_LEVEL",
+    symbols[Group1] = [ ISO_Level3_Shift, Multi_key ]
+  };
+};
diff --git a/symbols/us b/symbols/us
index 914e6166..7b29b074 100644
--- a/symbols/us
+++ b/symbols/us
@@ -2321,3 +2321,8 @@ xkb_symbols "de_se_fi"  {
 
     include "level3(ralt_switch)"
 };
+
+partial alphanumeric_keys modifier_keys
+xkb_symbols "codeman" {
+    include "codeman(std)"
+};
